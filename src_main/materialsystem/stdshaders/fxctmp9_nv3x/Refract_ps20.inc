class refract_ps20_Index
{
private:
	int m_nBLUR;
#ifdef _DEBUG
	bool m_bBLUR;
#endif
public:
	void SetBLUR( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nBLUR = i;
#ifdef _DEBUG
		m_bBLUR = true;
#endif
	}
	void SetBLUR( bool i )
	{
		m_nBLUR = i ? 1 : 0;
#ifdef _DEBUG
		m_bBLUR = true;
#endif
	}
private:
	int m_nFADEOUTONSILHOUETTE;
#ifdef _DEBUG
	bool m_bFADEOUTONSILHOUETTE;
#endif
public:
	void SetFADEOUTONSILHOUETTE( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nFADEOUTONSILHOUETTE = i;
#ifdef _DEBUG
		m_bFADEOUTONSILHOUETTE = true;
#endif
	}
	void SetFADEOUTONSILHOUETTE( bool i )
	{
		m_nFADEOUTONSILHOUETTE = i ? 1 : 0;
#ifdef _DEBUG
		m_bFADEOUTONSILHOUETTE = true;
#endif
	}
private:
	int m_nCUBEMAP;
#ifdef _DEBUG
	bool m_bCUBEMAP;
#endif
public:
	void SetCUBEMAP( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nCUBEMAP = i;
#ifdef _DEBUG
		m_bCUBEMAP = true;
#endif
	}
	void SetCUBEMAP( bool i )
	{
		m_nCUBEMAP = i ? 1 : 0;
#ifdef _DEBUG
		m_bCUBEMAP = true;
#endif
	}
private:
	int m_nREFRACTTINTTEXTURE;
#ifdef _DEBUG
	bool m_bREFRACTTINTTEXTURE;
#endif
public:
	void SetREFRACTTINTTEXTURE( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nREFRACTTINTTEXTURE = i;
#ifdef _DEBUG
		m_bREFRACTTINTTEXTURE = true;
#endif
	}
	void SetREFRACTTINTTEXTURE( bool i )
	{
		m_nREFRACTTINTTEXTURE = i ? 1 : 0;
#ifdef _DEBUG
		m_bREFRACTTINTTEXTURE = true;
#endif
	}
public:
	refract_ps20_Index()
	{
#ifdef _DEBUG
		m_bBLUR = false;
#endif // _DEBUG
		m_nBLUR = 0;
#ifdef _DEBUG
		m_bFADEOUTONSILHOUETTE = false;
#endif // _DEBUG
		m_nFADEOUTONSILHOUETTE = 0;
#ifdef _DEBUG
		m_bCUBEMAP = false;
#endif // _DEBUG
		m_nCUBEMAP = 0;
#ifdef _DEBUG
		m_bREFRACTTINTTEXTURE = false;
#endif // _DEBUG
		m_nREFRACTTINTTEXTURE = 0;
	}
	int GetIndex()
	{
		// Asserts to make sure that we aren't using any skipped combinations.
		// Asserts to make sure that we are setting all of the combination vars.
#ifdef _DEBUG
		bool bAllStaticVarsDefined = m_bBLUR && m_bFADEOUTONSILHOUETTE && m_bCUBEMAP && m_bREFRACTTINTTEXTURE;
		bool bNoStaticVarsDefined = !m_bBLUR && !m_bFADEOUTONSILHOUETTE && !m_bCUBEMAP && !m_bREFRACTTINTTEXTURE;
		Assert( bAllStaticVarsDefined != bNoStaticVarsDefined );
#endif // _DEBUG
		return ( 1 * m_nBLUR ) + ( 2 * m_nFADEOUTONSILHOUETTE ) + ( 4 * m_nCUBEMAP ) + ( 8 * m_nREFRACTTINTTEXTURE ) + 0;
	}
};
#ifdef DEFINE_SHADERS
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   g_RefractTint  c1       1
//   g_RefractScale c5       1
//   RefractSampler s2       1
//   NormalSampler  s3       1
//


static unsigned int pixelShader_Refract_ps20_0[] =
{
    0xffff0201, 0x0043fffe, 0x42415443, 0x0000001c, 0x000000e3, 0xffff0201, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000dc, 0x0000006c, 0x00030003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00020003, 0x00000001, 
    0x0000007c, 0x00000000, 0x0000009b, 0x00050002, 0x00000001, 0x000000ac, 
    0x00000000, 0x000000bc, 0x00010002, 0x00000001, 0x000000cc, 0x00000000, 
    0x6d726f4e, 0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 
    0x6665525f, 0x74636172, 0x6c616353, 0xabab0065, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 
    0xbf800000, 0x00000000, 0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 
    0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 
    0x0200001f, 0x90000000, 0xa00f0803, 0x02000006, 0x80080000, 0xb0aa0005, 
    0x03000005, 0x80030001, 0x80ff0000, 0xb0e40005, 0x03000042, 0x800f0000, 
    0xb0e40000, 0xa0e40803, 0x04000004, 0x80030000, 0xa0000000, 0x80e40000, 
    0xa0550000, 0x03000005, 0x80040000, 0x80ff0000, 0xa0000005, 0x04000004, 
    0x80030000, 0x80e40000, 0x80aa0000, 0x80e40001, 0x03000042, 0x800f0001, 
    0x80e40000, 0xa0e40802, 0x03000005, 0x80070000, 0x80e40001, 0xa0e40001, 
    0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   g_RefractTint  c1       1
//   g_RefractScale c5       1
//   RefractSampler s2       1
//   NormalSampler  s3       1
//


static unsigned int pixelShader_Refract_ps20_1[] =
{
    0xffff0201, 0x0043fffe, 0x42415443, 0x0000001c, 0x000000e3, 0xffff0201, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000dc, 0x0000006c, 0x00030003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00020003, 0x00000001, 
    0x0000007c, 0x00000000, 0x0000009b, 0x00050002, 0x00000001, 0x000000ac, 
    0x00000000, 0x000000bc, 0x00010002, 0x00000001, 0x000000cc, 0x00000000, 
    0x6d726f4e, 0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 
    0x6665525f, 0x74636172, 0x6c616353, 0xabab0065, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 
    0xbf800000, 0xba800000, 0x3b000000, 0x05000051, 0xa00f0002, 0x3e638e37, 
    0x3ee38e37, 0x3de38e37, 0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 
    0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 
    0x0200001f, 0x90000000, 0xa00f0803, 0x02000006, 0x80080000, 0xb0aa0005, 
    0x03000005, 0x80030001, 0x80ff0000, 0xb0e40005, 0x03000042, 0x800f0000, 
    0xb0e40000, 0xa0e40803, 0x04000004, 0x80030000, 0xa0000000, 0x80e40000, 
    0xa0550000, 0x03000005, 0x80040000, 0x80ff0000, 0xa0000005, 0x04000004, 
    0x80030004, 0x80e40000, 0x80aa0000, 0x80e40001, 0x03000002, 0x80030001, 
    0x80e40004, 0xa0eb0000, 0x03000002, 0x80030000, 0x80e40004, 0xa0aa0000, 
    0x03000042, 0x800f0002, 0x80e40001, 0xa0e40802, 0x03000042, 0x800f0001, 
    0x80e40000, 0xa0e40802, 0x03000005, 0x80070000, 0x80e40002, 0xa0000002, 
    0x04000004, 0x80070003, 0x80e40001, 0xa0550002, 0x80e40000, 0x03000002, 
    0x80030000, 0x80e40004, 0xa0ee0000, 0x03000002, 0x80030001, 0x80e40004, 
    0xa0ff0000, 0x03000042, 0x800f0001, 0x80e40001, 0xa0e40802, 0x03000042, 
    0x800f0002, 0x80e40000, 0xa0e40802, 0x04000004, 0x80070000, 0x80e40002, 
    0xa0000002, 0x80e40003, 0x04000004, 0x80070000, 0x80e40001, 0xa0aa0002, 
    0x80e40000, 0x03000005, 0x80070000, 0x80e40000, 0xa0e40001, 0x02000001, 
    0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   g_RefractTint  c1       1
//   g_RefractScale c5       1
//   RefractSampler s2       1
//   NormalSampler  s3       1
//


static unsigned int pixelShader_Refract_ps20_2[] =
{
    0xffff0201, 0x0043fffe, 0x42415443, 0x0000001c, 0x000000e3, 0xffff0201, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000dc, 0x0000006c, 0x00030003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00020003, 0x00000001, 
    0x0000007c, 0x00000000, 0x0000009b, 0x00050002, 0x00000001, 0x000000ac, 
    0x00000000, 0x000000bc, 0x00010002, 0x00000001, 0x000000cc, 0x00000000, 
    0x6d726f4e, 0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 
    0x6665525f, 0x74636172, 0x6c616353, 0xabab0065, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 
    0xbf800000, 0x00000000, 0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 
    0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 
    0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 
    0x02000006, 0x80080000, 0xb0aa0005, 0x03000005, 0x80030000, 0x80ff0000, 
    0xb0e40005, 0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40803, 0x04000004, 
    0x80030001, 0xa0000000, 0x80e40001, 0xa0550000, 0x03000005, 0x80080000, 
    0x80ff0001, 0xa0000005, 0x04000004, 0x80030001, 0x80e40001, 0x80ff0000, 
    0x80e40000, 0x03000042, 0x800f0003, 0x80e40001, 0xa0e40802, 0x03000042, 
    0x800f0000, 0x80e40000, 0xa0e40802, 0x03000005, 0x80080000, 0xb0aa0006, 
    0xb0aa0006, 0x04000004, 0x80070001, 0xa0e40001, 0x80e40003, 0x81e40000, 
    0x03000005, 0x80080002, 0x80ff0000, 0xb1aa0006, 0x02000001, 0x80080000, 
    0x80ff0001, 0x04000004, 0x80070000, 0x80ff0002, 0x80e40001, 0x80e40000, 
    0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name           Reg   Size
//   -------------- ----- ----
//   g_RefractTint  c1       1
//   g_RefractScale c5       1
//   RefractSampler s2       1
//   NormalSampler  s3       1
//


static unsigned int pixelShader_Refract_ps20_3[] =
{
    0xffff0201, 0x0043fffe, 0x42415443, 0x0000001c, 0x000000e3, 0xffff0201, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000dc, 0x0000006c, 0x00030003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00020003, 0x00000001, 
    0x0000007c, 0x00000000, 0x0000009b, 0x00050002, 0x00000001, 0x000000ac, 
    0x00000000, 0x000000bc, 0x00010002, 0x00000001, 0x000000cc, 0x00000000, 
    0x6d726f4e, 0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 
    0x6665525f, 0x74636172, 0x6c616353, 0xabab0065, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 
    0xbf800000, 0xba800000, 0x3b000000, 0x05000051, 0xa00f0002, 0x3e638e37, 
    0x3ee38e37, 0x3de38e37, 0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 
    0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 
    0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 
    0x02000006, 0x80080000, 0xb0aa0005, 0x03000005, 0x80030000, 0x80ff0000, 
    0xb0e40005, 0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40803, 0x04000004, 
    0x80030001, 0xa0000000, 0x80e40001, 0xa0550000, 0x03000005, 0x80080000, 
    0x80ff0001, 0xa0000005, 0x04000004, 0x80030005, 0x80e40001, 0x80ff0000, 
    0x80e40000, 0x03000002, 0x80030001, 0x80e40005, 0xa0eb0000, 0x03000042, 
    0x800f0000, 0x80e40000, 0xa0e40802, 0x03000042, 0x800f0002, 0x80e40001, 
    0xa0e40802, 0x03000005, 0x80070004, 0x80e40002, 0xa0000002, 0x03000002, 
    0x80030002, 0x80e40005, 0xa0aa0000, 0x03000002, 0x80030001, 0x80e40005, 
    0xa0ee0000, 0x03000042, 0x800f0003, 0x80e40002, 0xa0e40802, 0x03000042, 
    0x800f0002, 0x80e40001, 0xa0e40802, 0x04000004, 0x80070001, 0x80e40003, 
    0xa0550002, 0x80e40004, 0x03000002, 0x80030003, 0x80e40005, 0xa0ff0000, 
    0x04000004, 0x80070001, 0x80e40002, 0xa0000002, 0x80e40001, 0x03000042, 
    0x800f0002, 0x80e40003, 0xa0e40802, 0x04000004, 0x80070001, 0x80e40002, 
    0xa0aa0002, 0x80e40001, 0x03000005, 0x80080000, 0xb0aa0006, 0xb0aa0006, 
    0x04000004, 0x80070001, 0x80e40001, 0xa0e40001, 0x81e40000, 0x03000005, 
    0x80080002, 0x80ff0000, 0xb1aa0006, 0x02000001, 0x80080000, 0x80ff0001, 
    0x04000004, 0x80070000, 0x80ff0002, 0x80e40001, 0x80e40000, 0x02000001, 
    0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//


static unsigned int pixelShader_Refract_ps20_4[] =
{
    0xffff0201, 0x006bfffe, 0x42415443, 0x0000001c, 0x00000181, 0xffff0201, 
    0x00000008, 0x0000001c, 0x00000000, 0x0000017a, 0x000000bc, 0x00040003, 
    0x00000001, 0x000000cc, 0x00000000, 0x000000dc, 0x00030003, 0x00000001, 
    0x000000ec, 0x00000000, 0x000000fc, 0x00020003, 0x00000001, 0x000000ec, 
    0x00000000, 0x0000010b, 0x00020002, 0x00000001, 0x0000011c, 0x00000000, 
    0x0000012c, 0x00030002, 0x00000001, 0x0000011c, 0x00000000, 0x0000013f, 
    0x00000002, 0x00000001, 0x0000011c, 0x00000000, 0x0000014c, 0x00050002, 
    0x00000001, 0x0000015c, 0x00000000, 0x0000016c, 0x00010002, 0x00000001, 
    0x0000011c, 0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 
    0x000e0004, 0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 
    0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 
    0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 0x766e455f, 0x4370616d, 
    0x72746e6f, 0x00747361, 0x00030001, 0x00030001, 0x00000001, 0x00000000, 
    0x6e455f67, 0x70616d76, 0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 
    0x5470616d, 0x00746e69, 0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 
    0x00030001, 0x00020001, 0x00000001, 0x00000000, 0x65525f67, 0x63617266, 
    0x6e695474, 0x73700074, 0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 
    0x44202952, 0x39584433, 0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 
    0xababab00, 0x05000051, 0xa00f0004, 0x40000000, 0xbf800000, 0x3eaaaaab, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 
    0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 
    0xa00f0803, 0x0200001f, 0x98000000, 0xa00f0804, 0x03000042, 0x800f0001, 
    0xb0e40000, 0xa0e40803, 0x04000004, 0x80070001, 0xa0000004, 0x80e40001, 
    0xa0550004, 0x03000005, 0x80070000, 0x80550001, 0xb0e40003, 0x04000004, 
    0x80070000, 0xb0e40002, 0x80000001, 0x80e40000, 0x04000004, 0x80070000, 
    0xb0e40004, 0x80aa0001, 0x80e40000, 0x03000008, 0x80080000, 0x80e40000, 
    0xb0e40001, 0x03000002, 0x80040001, 0x80ff0000, 0x80ff0000, 0x03000008, 
    0x80080000, 0x80e40000, 0x80e40000, 0x03000005, 0x80070003, 0x80ff0000, 
    0xb0e40001, 0x02000006, 0x80080000, 0xb0aa0005, 0x03000005, 0x80030002, 
    0x80ff0000, 0xb0e40005, 0x03000005, 0x80080000, 0x80ff0001, 0xa0000005, 
    0x04000004, 0x80070000, 0x80aa0001, 0x80e40000, 0x81e40003, 0x04000004, 
    0x80030001, 0x80e40001, 0x80ff0000, 0x80e40002, 0x03000042, 0x800f0002, 
    0x80e40000, 0xa0e40804, 0x03000042, 0x800f0000, 0x80e40001, 0xa0e40802, 
    0x03000005, 0x80070001, 0x80ff0001, 0x80e40002, 0x03000005, 0x80070002, 
    0x80e40001, 0xa0e40000, 0x04000004, 0x80070001, 0x80e40002, 0x80e40002, 
    0x81e40002, 0x04000004, 0x80070002, 0xa0e40002, 0x80e40001, 0x80e40002, 
    0x03000008, 0x80080003, 0x80e40002, 0xa0aa0004, 0x04000012, 0x80070001, 
    0xa0e40003, 0x80e40002, 0x80ff0003, 0x02000001, 0x80080000, 0x80ff0001, 
    0x04000004, 0x80070000, 0xa0e40001, 0x80e40000, 0x80e40001, 0x02000001, 
    0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//


static unsigned int pixelShader_Refract_ps20_5[] =
{
    0xffff0201, 0x006bfffe, 0x42415443, 0x0000001c, 0x00000181, 0xffff0201, 
    0x00000008, 0x0000001c, 0x00000000, 0x0000017a, 0x000000bc, 0x00040003, 
    0x00000001, 0x000000cc, 0x00000000, 0x000000dc, 0x00030003, 0x00000001, 
    0x000000ec, 0x00000000, 0x000000fc, 0x00020003, 0x00000001, 0x000000ec, 
    0x00000000, 0x0000010b, 0x00020002, 0x00000001, 0x0000011c, 0x00000000, 
    0x0000012c, 0x00030002, 0x00000001, 0x0000011c, 0x00000000, 0x0000013f, 
    0x00000002, 0x00000001, 0x0000011c, 0x00000000, 0x0000014c, 0x00050002, 
    0x00000001, 0x0000015c, 0x00000000, 0x0000016c, 0x00010002, 0x00000001, 
    0x0000011c, 0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 
    0x000e0004, 0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 
    0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 
    0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 0x766e455f, 0x4370616d, 
    0x72746e6f, 0x00747361, 0x00030001, 0x00030001, 0x00000001, 0x00000000, 
    0x6e455f67, 0x70616d76, 0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 
    0x5470616d, 0x00746e69, 0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 
    0x00030001, 0x00020001, 0x00000001, 0x00000000, 0x65525f67, 0x63617266, 
    0x6e695474, 0x73700074, 0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 
    0x44202952, 0x39584433, 0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 
    0xababab00, 0x05000051, 0xa00f0004, 0x40000000, 0xbf800000, 0xba800000, 
    0x3b000000, 0x05000051, 0xa00f0006, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 
    0x3eaaaaab, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 
    0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 
    0xa00f0803, 0x0200001f, 0x98000000, 0xa00f0804, 0x03000042, 0x800f0000, 
    0xb0e40000, 0xa0e40803, 0x04000004, 0x80070002, 0xa0000004, 0x80e40000, 
    0xa0550004, 0x03000005, 0x80070001, 0x80550002, 0xb0e40003, 0x04000004, 
    0x80070001, 0xb0e40002, 0x80000002, 0x80e40001, 0x04000004, 0x80070000, 
    0xb0e40004, 0x80aa0002, 0x80e40001, 0x03000008, 0x80080001, 0x80e40000, 
    0xb0e40001, 0x03000002, 0x80080001, 0x80ff0001, 0x80ff0001, 0x03000008, 
    0x80040001, 0x80e40000, 0x80e40000, 0x02000006, 0x80020001, 0xb0aa0005, 
    0x03000005, 0x80030003, 0x80550001, 0xb0e40005, 0x03000005, 0x80080002, 
    0x80ff0000, 0xa0000005, 0x03000005, 0x80070001, 0x80aa0001, 0xb0e40001, 
    0x04000004, 0x80030004, 0x80e40002, 0x80ff0002, 0x80e40003, 0x04000004, 
    0x80070000, 0x80ff0001, 0x80e40000, 0x81e40001, 0x03000002, 0x80030001, 
    0x80e40004, 0xa0eb0004, 0x03000042, 0x800f0003, 0x80e40000, 0xa0e40804, 
    0x03000042, 0x800f0001, 0x80e40001, 0xa0e40802, 0x03000005, 0x80070000, 
    0x80ff0000, 0x80e40003, 0x03000005, 0x80070003, 0x80e40000, 0xa0e40000, 
    0x04000004, 0x80070000, 0x80e40003, 0x80e40003, 0x81e40003, 0x04000004, 
    0x80070000, 0xa0e40002, 0x80e40000, 0x80e40003, 0x03000008, 0x80080001, 
    0x80e40000, 0xa0ff0006, 0x04000012, 0x80070003, 0xa0e40003, 0x80e40000, 
    0x80ff0001, 0x03000005, 0x80070005, 0x80e40001, 0xa0000006, 0x03000002, 
    0x80030001, 0x80e40004, 0xa0aa0004, 0x03000002, 0x80030000, 0x80e40004, 
    0xa0ee0004, 0x03000042, 0x800f0002, 0x80e40001, 0xa0e40802, 0x03000042, 
    0x800f0001, 0x80e40000, 0xa0e40802, 0x04000004, 0x80070000, 0x80e40002, 
    0xa0550006, 0x80e40005, 0x03000002, 0x80030002, 0x80e40004, 0xa0ff0004, 
    0x04000004, 0x80070000, 0x80e40001, 0xa0000006, 0x80e40000, 0x03000042, 
    0x800f0001, 0x80e40002, 0xa0e40802, 0x04000004, 0x80070000, 0x80e40001, 
    0xa0aa0006, 0x80e40000, 0x04000004, 0x80070000, 0x80e40000, 0xa0e40001, 
    0x80e40003, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//


static unsigned int pixelShader_Refract_ps20_6[] =
{
    0xffff0201, 0x006bfffe, 0x42415443, 0x0000001c, 0x00000181, 0xffff0201, 
    0x00000008, 0x0000001c, 0x00000000, 0x0000017a, 0x000000bc, 0x00040003, 
    0x00000001, 0x000000cc, 0x00000000, 0x000000dc, 0x00030003, 0x00000001, 
    0x000000ec, 0x00000000, 0x000000fc, 0x00020003, 0x00000001, 0x000000ec, 
    0x00000000, 0x0000010b, 0x00020002, 0x00000001, 0x0000011c, 0x00000000, 
    0x0000012c, 0x00030002, 0x00000001, 0x0000011c, 0x00000000, 0x0000013f, 
    0x00000002, 0x00000001, 0x0000011c, 0x00000000, 0x0000014c, 0x00050002, 
    0x00000001, 0x0000015c, 0x00000000, 0x0000016c, 0x00010002, 0x00000001, 
    0x0000011c, 0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 
    0x000e0004, 0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 
    0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 
    0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 0x766e455f, 0x4370616d, 
    0x72746e6f, 0x00747361, 0x00030001, 0x00030001, 0x00000001, 0x00000000, 
    0x6e455f67, 0x70616d76, 0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 
    0x5470616d, 0x00746e69, 0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 
    0x00030001, 0x00020001, 0x00000001, 0x00000000, 0x65525f67, 0x63617266, 
    0x6e695474, 0x73700074, 0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 
    0x44202952, 0x39584433, 0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 
    0xababab00, 0x05000051, 0xa00f0004, 0x40000000, 0xbf800000, 0x3eaaaaab, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 
    0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 0x98000000, 
    0xa00f0804, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40803, 0x04000004, 
    0x80070000, 0xa0000004, 0x80e40000, 0xa0550004, 0x03000005, 0x80070001, 
    0x80550000, 0xb0e40003, 0x04000004, 0x80070001, 0xb0e40002, 0x80000000, 
    0x80e40001, 0x04000004, 0x80070001, 0xb0e40004, 0x80aa0000, 0x80e40001, 
    0x03000008, 0x80040000, 0x80e40001, 0xb0e40001, 0x03000008, 0x80080001, 
    0x80e40001, 0x80e40001, 0x03000002, 0x80040000, 0x80aa0000, 0x80aa0000, 
    0x03000005, 0x80070002, 0x80ff0001, 0xb0e40001, 0x04000004, 0x80070001, 
    0x80aa0000, 0x80e40001, 0x81e40002, 0x03000042, 0x800f0001, 0x80e40001, 
    0xa0e40804, 0x03000005, 0x80070001, 0x80ff0000, 0x80e40001, 0x03000005, 
    0x80070002, 0x80e40001, 0xa0e40000, 0x04000004, 0x80070001, 0x80e40002, 
    0x80e40002, 0x81e40002, 0x04000004, 0x80070004, 0xa0e40002, 0x80e40001, 
    0x80e40002, 0x02000006, 0x80080001, 0xb0aa0005, 0x03000005, 0x80040000, 
    0x80ff0000, 0xa0000005, 0x03000005, 0x80030001, 0x80ff0001, 0xb0e40005, 
    0x03000008, 0x80080005, 0x80e40004, 0xa0aa0004, 0x04000004, 0x80030000, 
    0x80e40000, 0x80aa0000, 0x80e40001, 0x03000042, 0x800f0002, 0x80e40000, 
    0xa0e40802, 0x03000042, 0x800f0001, 0x80e40001, 0xa0e40802, 0x03000005, 
    0x80080001, 0xb0aa0006, 0xb0aa0006, 0x04000004, 0x80070000, 0xa0e40001, 
    0x80e40002, 0x81e40001, 0x03000005, 0x80080001, 0x80ff0001, 0xb1aa0006, 
    0x04000012, 0x80070003, 0xa0e40003, 0x80e40004, 0x80ff0005, 0x04000004, 
    0x80070000, 0x80ff0001, 0x80e40000, 0x80e40001, 0x03000002, 0x80070000, 
    0x80e40003, 0x80e40000, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=0
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//


static unsigned int pixelShader_Refract_ps20_7[] =
{
    0xffff0201, 0x006bfffe, 0x42415443, 0x0000001c, 0x00000181, 0xffff0201, 
    0x00000008, 0x0000001c, 0x00000000, 0x0000017a, 0x000000bc, 0x00040003, 
    0x00000001, 0x000000cc, 0x00000000, 0x000000dc, 0x00030003, 0x00000001, 
    0x000000ec, 0x00000000, 0x000000fc, 0x00020003, 0x00000001, 0x000000ec, 
    0x00000000, 0x0000010b, 0x00020002, 0x00000001, 0x0000011c, 0x00000000, 
    0x0000012c, 0x00030002, 0x00000001, 0x0000011c, 0x00000000, 0x0000013f, 
    0x00000002, 0x00000001, 0x0000011c, 0x00000000, 0x0000014c, 0x00050002, 
    0x00000001, 0x0000015c, 0x00000000, 0x0000016c, 0x00010002, 0x00000001, 
    0x0000011c, 0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 
    0x000e0004, 0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 
    0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 
    0x72666552, 0x53746361, 0x6c706d61, 0x67007265, 0x766e455f, 0x4370616d, 
    0x72746e6f, 0x00747361, 0x00030001, 0x00030001, 0x00000001, 0x00000000, 
    0x6e455f67, 0x70616d76, 0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 
    0x5470616d, 0x00746e69, 0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 
    0x00030001, 0x00020001, 0x00000001, 0x00000000, 0x65525f67, 0x63617266, 
    0x6e695474, 0x73700074, 0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 
    0x44202952, 0x39584433, 0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 
    0xababab00, 0x05000051, 0xa00f0004, 0x40000000, 0xbf800000, 0xba800000, 
    0x3b000000, 0x05000051, 0xa00f0006, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 
    0x3eaaaaab, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 
    0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 0x98000000, 
    0xa00f0804, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40803, 0x04000004, 
    0x80070001, 0xa0000004, 0x80e40000, 0xa0550004, 0x03000005, 0x80070000, 
    0x80550001, 0xb0e40003, 0x04000004, 0x80070000, 0xb0e40002, 0x80000001, 
    0x80e40000, 0x04000004, 0x80070000, 0xb0e40004, 0x80aa0001, 0x80e40000, 
    0x03000008, 0x80080001, 0x80e40000, 0xb0e40001, 0x03000002, 0x80040001, 
    0x80ff0001, 0x80ff0001, 0x03000008, 0x80080001, 0x80e40000, 0x80e40000, 
    0x03000005, 0x80070003, 0x80ff0001, 0xb0e40001, 0x02000006, 0x80080002, 
    0xb0aa0005, 0x03000005, 0x80080001, 0x80ff0000, 0xa0000005, 0x03000005, 
    0x80030002, 0x80ff0002, 0xb0e40005, 0x04000004, 0x80070000, 0x80aa0001, 
    0x80e40000, 0x81e40003, 0x04000004, 0x80030005, 0x80e40001, 0x80ff0001, 
    0x80e40002, 0x03000042, 0x800f0003, 0x80e40000, 0xa0e40804, 0x03000042, 
    0x800f0001, 0x80e40002, 0xa0e40802, 0x03000005, 0x80070000, 0x80ff0000, 
    0x80e40003, 0x03000005, 0x80070003, 0x80e40000, 0xa0e40000, 0x04000004, 
    0x80070000, 0x80e40003, 0x80e40003, 0x81e40003, 0x04000004, 0x80070004, 
    0xa0e40002, 0x80e40000, 0x80e40003, 0x03000002, 0x80030002, 0x80e40005, 
    0xa0eb0004, 0x03000002, 0x80030000, 0x80e40005, 0xa0aa0004, 0x03000042, 
    0x800f0003, 0x80e40002, 0xa0e40802, 0x03000042, 0x800f0002, 0x80e40000, 
    0xa0e40802, 0x03000005, 0x80070003, 0x80e40003, 0xa0000006, 0x03000008, 
    0x80080005, 0x80e40004, 0xa0ff0006, 0x04000004, 0x80070000, 0x80e40002, 
    0xa0550006, 0x80e40003, 0x03000002, 0x80030003, 0x80e40005, 0xa0ee0004, 
    0x03000002, 0x80030002, 0x80e40005, 0xa0ff0004, 0x03000042, 0x800f0002, 
    0x80e40002, 0xa0e40802, 0x03000042, 0x800f0003, 0x80e40003, 0xa0e40802, 
    0x04000004, 0x80070003, 0x80e40003, 0xa0000006, 0x80e40000, 0x04000004, 
    0x80070000, 0x80e40002, 0xa0aa0006, 0x80e40003, 0x03000005, 0x80080001, 
    0xb0aa0006, 0xb0aa0006, 0x04000004, 0x80070000, 0x80e40000, 0xa0e40001, 
    0x81e40001, 0x03000005, 0x80080001, 0x80ff0001, 0xb1aa0006, 0x04000012, 
    0x80070003, 0xa0e40003, 0x80e40004, 0x80ff0005, 0x04000004, 0x80070000, 
    0x80ff0001, 0x80e40000, 0x80e40001, 0x03000002, 0x80070000, 0x80e40003, 
    0x80e40000, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_RefractTint      c1       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_8[] =
{
    0xffff0201, 0x004dfffe, 0x42415443, 0x0000001c, 0x0000010b, 0xffff0201, 
    0x00000005, 0x0000001c, 0x00000000, 0x00000104, 0x00000080, 0x00030003, 
    0x00000001, 0x00000090, 0x00000000, 0x000000a0, 0x00020003, 0x00000001, 
    0x00000090, 0x00000000, 0x000000af, 0x00050003, 0x00000001, 0x00000090, 
    0x00000000, 0x000000c2, 0x00050002, 0x00000001, 0x000000d4, 0x00000000, 
    0x000000e4, 0x00010002, 0x00000001, 0x000000f4, 0x00000000, 0x6d726f4e, 
    0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 
    0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 
    0x69547463, 0x6153746e, 0x656c706d, 0x5f670072, 0x72666552, 0x53746361, 
    0x656c6163, 0xababab00, 0x00030001, 0x00020001, 0x00000001, 0x00000000, 
    0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 0x00030001, 0x00030001, 
    0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 0x6f726369, 0x74666f73, 
    0x29522820, 0x44334420, 0x53203958, 0x65646168, 0x6f432072, 0x6c69706d, 
    0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 0xbf800000, 0x00000000, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 
    0xa00f0803, 0x0200001f, 0x90000000, 0xa00f0805, 0x02000006, 0x80080000, 
    0xb0aa0005, 0x03000005, 0x80030003, 0x80ff0000, 0xb0e40005, 0x03000042, 
    0x800f0001, 0xb0e40000, 0xa0e40803, 0x04000004, 0x80030000, 0xa0000000, 
    0x80e40001, 0xa0550000, 0x03000005, 0x80080000, 0x80ff0001, 0xa0000005, 
    0x03000002, 0x80070001, 0xa0e40001, 0xa0e40001, 0x04000004, 0x80030000, 
    0x80e40000, 0x80ff0000, 0x80e40003, 0x03000042, 0x800f0002, 0xb0e40000, 
    0xa0e40805, 0x03000042, 0x800f0000, 0x80e40000, 0xa0e40802, 0x03000005, 
    0x80070001, 0x80e40001, 0x80e40002, 0x02000001, 0x80080000, 0x80ff0001, 
    0x03000005, 0x80070000, 0x80e40000, 0x80e40001, 0x02000001, 0x800f0800, 
    0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_RefractTint      c1       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_9[] =
{
    0xffff0201, 0x004dfffe, 0x42415443, 0x0000001c, 0x0000010b, 0xffff0201, 
    0x00000005, 0x0000001c, 0x00000000, 0x00000104, 0x00000080, 0x00030003, 
    0x00000001, 0x00000090, 0x00000000, 0x000000a0, 0x00020003, 0x00000001, 
    0x00000090, 0x00000000, 0x000000af, 0x00050003, 0x00000001, 0x00000090, 
    0x00000000, 0x000000c2, 0x00050002, 0x00000001, 0x000000d4, 0x00000000, 
    0x000000e4, 0x00010002, 0x00000001, 0x000000f4, 0x00000000, 0x6d726f4e, 
    0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 
    0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 
    0x69547463, 0x6153746e, 0x656c706d, 0x5f670072, 0x72666552, 0x53746361, 
    0x656c6163, 0xababab00, 0x00030001, 0x00020001, 0x00000001, 0x00000000, 
    0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 0x00030001, 0x00030001, 
    0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 0x6f726369, 0x74666f73, 
    0x29522820, 0x44334420, 0x53203958, 0x65646168, 0x6f432072, 0x6c69706d, 
    0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 0xbf800000, 0xba800000, 
    0x3b000000, 0x05000051, 0xa00f0002, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 
    0xa00f0803, 0x0200001f, 0x90000000, 0xa00f0805, 0x02000006, 0x80080000, 
    0xb0aa0005, 0x03000005, 0x80030001, 0x80ff0000, 0xb0e40005, 0x03000042, 
    0x800f0000, 0xb0e40000, 0xa0e40803, 0x04000004, 0x80030000, 0xa0000000, 
    0x80e40000, 0xa0550000, 0x03000005, 0x80040000, 0x80ff0000, 0xa0000005, 
    0x04000004, 0x80030004, 0x80e40000, 0x80aa0000, 0x80e40001, 0x03000002, 
    0x80030001, 0x80e40004, 0xa0eb0000, 0x03000002, 0x80030000, 0x80e40004, 
    0xa0aa0000, 0x03000042, 0x800f0002, 0x80e40001, 0xa0e40802, 0x03000042, 
    0x800f0001, 0x80e40000, 0xa0e40802, 0x03000005, 0x80070000, 0x80e40002, 
    0xa0000002, 0x04000004, 0x80070003, 0x80e40001, 0xa0550002, 0x80e40000, 
    0x03000002, 0x80030000, 0x80e40004, 0xa0ee0000, 0x03000002, 0x80030001, 
    0x80e40004, 0xa0ff0000, 0x03000042, 0x800f0001, 0x80e40001, 0xa0e40802, 
    0x03000042, 0x800f0002, 0x80e40000, 0xa0e40802, 0x04000004, 0x80070000, 
    0x80e40002, 0xa0000002, 0x80e40003, 0x04000004, 0x80070000, 0x80e40001, 
    0xa0aa0002, 0x80e40000, 0x03000002, 0x80070002, 0xa0e40001, 0xa0e40001, 
    0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40805, 0x03000005, 0x80070001, 
    0x80e40002, 0x80e40001, 0x03000005, 0x80070000, 0x80e40000, 0x80e40001, 
    0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_RefractTint      c1       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_10[] =
{
    0xffff0201, 0x004dfffe, 0x42415443, 0x0000001c, 0x0000010b, 0xffff0201, 
    0x00000005, 0x0000001c, 0x00000000, 0x00000104, 0x00000080, 0x00030003, 
    0x00000001, 0x00000090, 0x00000000, 0x000000a0, 0x00020003, 0x00000001, 
    0x00000090, 0x00000000, 0x000000af, 0x00050003, 0x00000001, 0x00000090, 
    0x00000000, 0x000000c2, 0x00050002, 0x00000001, 0x000000d4, 0x00000000, 
    0x000000e4, 0x00010002, 0x00000001, 0x000000f4, 0x00000000, 0x6d726f4e, 
    0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 
    0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 
    0x69547463, 0x6153746e, 0x656c706d, 0x5f670072, 0x72666552, 0x53746361, 
    0x656c6163, 0xababab00, 0x00030001, 0x00020001, 0x00000001, 0x00000000, 
    0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 0x00030001, 0x00030001, 
    0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 0x6f726369, 0x74666f73, 
    0x29522820, 0x44334420, 0x53203958, 0x65646168, 0x6f432072, 0x6c69706d, 
    0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 0xbf800000, 0x00000000, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 0x90000000, 
    0xa00f0805, 0x03000002, 0x80070003, 0xa0e40001, 0xa0e40001, 0x03000042, 
    0x800f0000, 0xb0e40000, 0xa0e40805, 0x02000006, 0x80080000, 0xb0aa0005, 
    0x03000005, 0x80030002, 0x80ff0000, 0xb0e40005, 0x03000042, 0x800f0001, 
    0xb0e40000, 0xa0e40803, 0x04000004, 0x80030005, 0xa0000000, 0x80e40001, 
    0xa0550000, 0x03000005, 0x80080000, 0x80ff0001, 0xa0000005, 0x03000005, 
    0x80070001, 0x80e40003, 0x80e40000, 0x04000004, 0x80030000, 0x80e40005, 
    0x80ff0000, 0x80e40002, 0x03000042, 0x800f0003, 0x80e40000, 0xa0e40802, 
    0x03000042, 0x800f0000, 0x80e40002, 0xa0e40802, 0x03000005, 0x80080000, 
    0xb0aa0006, 0xb0aa0006, 0x04000004, 0x80070001, 0x80e40001, 0x80e40003, 
    0x81e40000, 0x03000005, 0x80080002, 0x80ff0000, 0xb1aa0006, 0x02000001, 
    0x80080000, 0x80ff0001, 0x04000004, 0x80070000, 0x80ff0002, 0x80e40001, 
    0x80e40000, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=0 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_RefractTint      c1       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_11[] =
{
    0xffff0201, 0x004dfffe, 0x42415443, 0x0000001c, 0x0000010b, 0xffff0201, 
    0x00000005, 0x0000001c, 0x00000000, 0x00000104, 0x00000080, 0x00030003, 
    0x00000001, 0x00000090, 0x00000000, 0x000000a0, 0x00020003, 0x00000001, 
    0x00000090, 0x00000000, 0x000000af, 0x00050003, 0x00000001, 0x00000090, 
    0x00000000, 0x000000c2, 0x00050002, 0x00000001, 0x000000d4, 0x00000000, 
    0x000000e4, 0x00010002, 0x00000001, 0x000000f4, 0x00000000, 0x6d726f4e, 
    0x61536c61, 0x656c706d, 0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 
    0x00000000, 0x72666552, 0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 
    0x69547463, 0x6153746e, 0x656c706d, 0x5f670072, 0x72666552, 0x53746361, 
    0x656c6163, 0xababab00, 0x00030001, 0x00020001, 0x00000001, 0x00000000, 
    0x65525f67, 0x63617266, 0x6e695474, 0xabab0074, 0x00030001, 0x00030001, 
    0x00000001, 0x00000000, 0x325f7370, 0x4d00615f, 0x6f726369, 0x74666f73, 
    0x29522820, 0x44334420, 0x53203958, 0x65646168, 0x6f432072, 0x6c69706d, 
    0xab007265, 0x05000051, 0xa00f0000, 0x40000000, 0xbf800000, 0xba800000, 
    0x3b000000, 0x05000051, 0xa00f0002, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 
    0x00000000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 
    0xb0070005, 0x0200001f, 0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 0x90000000, 
    0xa00f0805, 0x02000006, 0x80080000, 0xb0aa0005, 0x03000005, 0x80030000, 
    0x80ff0000, 0xb0e40005, 0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40803, 
    0x04000004, 0x80030001, 0xa0000000, 0x80e40001, 0xa0550000, 0x03000005, 
    0x80080000, 0x80ff0001, 0xa0000005, 0x04000004, 0x80030005, 0x80e40001, 
    0x80ff0000, 0x80e40000, 0x03000002, 0x80030001, 0x80e40005, 0xa0eb0000, 
    0x03000042, 0x800f0000, 0x80e40000, 0xa0e40802, 0x03000042, 0x800f0002, 
    0x80e40001, 0xa0e40802, 0x03000005, 0x80070004, 0x80e40002, 0xa0000002, 
    0x03000002, 0x80030002, 0x80e40005, 0xa0aa0000, 0x03000002, 0x80030001, 
    0x80e40005, 0xa0ee0000, 0x03000042, 0x800f0003, 0x80e40002, 0xa0e40802, 
    0x03000042, 0x800f0002, 0x80e40001, 0xa0e40802, 0x04000004, 0x80070001, 
    0x80e40003, 0xa0550002, 0x80e40004, 0x03000002, 0x80030003, 0x80e40005, 
    0xa0ff0000, 0x04000004, 0x80070004, 0x80e40002, 0xa0000002, 0x80e40001, 
    0x03000042, 0x800f0002, 0xb0e40000, 0xa0e40805, 0x03000042, 0x800f0003, 
    0x80e40003, 0xa0e40802, 0x04000004, 0x80070001, 0x80e40003, 0xa0aa0002, 
    0x80e40004, 0x03000002, 0x80070003, 0xa0e40001, 0xa0e40001, 0x03000005, 
    0x80070002, 0x80e40002, 0x80e40003, 0x03000005, 0x80080000, 0xb0aa0006, 
    0xb0aa0006, 0x04000004, 0x80070001, 0x80e40001, 0x80e40002, 0x81e40000, 
    0x03000005, 0x80080002, 0x80ff0000, 0xb1aa0006, 0x02000001, 0x80080000, 
    0x80ff0001, 0x04000004, 0x80070000, 0x80ff0002, 0x80e40001, 0x80e40000, 
    0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_12[] =
{
    0xffff0201, 0x0075fffe, 0x42415443, 0x0000001c, 0x000001a9, 0xffff0201, 
    0x00000009, 0x0000001c, 0x00000000, 0x000001a2, 0x000000d0, 0x00040003, 
    0x00000001, 0x000000e0, 0x00000000, 0x000000f0, 0x00030003, 0x00000001, 
    0x00000100, 0x00000000, 0x00000110, 0x00020003, 0x00000001, 0x00000100, 
    0x00000000, 0x0000011f, 0x00050003, 0x00000001, 0x00000100, 0x00000000, 
    0x00000132, 0x00020002, 0x00000001, 0x00000144, 0x00000000, 0x00000154, 
    0x00030002, 0x00000001, 0x00000144, 0x00000000, 0x00000167, 0x00000002, 
    0x00000001, 0x00000144, 0x00000000, 0x00000174, 0x00050002, 0x00000001, 
    0x00000184, 0x00000000, 0x00000194, 0x00010002, 0x00000001, 0x00000144, 
    0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 
    0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 0x656c706d, 
    0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x72666552, 
    0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 0x69547463, 0x6153746e, 
    0x656c706d, 0x5f670072, 0x6d766e45, 0x6f437061, 0x6172746e, 0xab007473, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x6e455f67, 0x70616d76, 
    0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 0x5470616d, 0x00746e69, 
    0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0x73700074, 
    0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 0x44202952, 0x39584433, 
    0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 0xababab00, 0x05000051, 
    0xa00f0004, 0x40000000, 0xbf800000, 0x3eaaaaab, 0x00000000, 0x0200001f, 
    0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 0xb0070001, 0x0200001f, 
    0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 0xb0070003, 0x0200001f, 
    0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 
    0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 
    0x98000000, 0xa00f0804, 0x0200001f, 0x90000000, 0xa00f0805, 0x03000042, 
    0x800f0000, 0xb0e40000, 0xa0e40803, 0x04000004, 0x80070004, 0xa0000004, 
    0x80e40000, 0xa0550004, 0x03000005, 0x80070001, 0x80550004, 0xb0e40003, 
    0x04000004, 0x80070001, 0xb0e40002, 0x80000004, 0x80e40001, 0x04000004, 
    0x80070000, 0xb0e40004, 0x80aa0004, 0x80e40001, 0x03000008, 0x80080001, 
    0x80e40000, 0xb0e40001, 0x03000008, 0x80040001, 0x80e40000, 0x80e40000, 
    0x03000002, 0x80080001, 0x80ff0001, 0x80ff0001, 0x03000005, 0x80070001, 
    0x80aa0001, 0xb0e40001, 0x04000004, 0x80070000, 0x80ff0001, 0x80e40000, 
    0x81e40001, 0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40805, 0x03000042, 
    0x800f0003, 0x80e40000, 0xa0e40804, 0x03000005, 0x80070000, 0x80ff0000, 
    0x80e40003, 0x03000005, 0x80070003, 0x80e40000, 0xa0e40000, 0x04000004, 
    0x80070000, 0x80e40003, 0x80e40003, 0x81e40003, 0x04000004, 0x80070000, 
    0xa0e40002, 0x80e40000, 0x80e40003, 0x03000008, 0x80080001, 0x80e40000, 
    0xa0aa0004, 0x04000012, 0x80070002, 0xa0e40003, 0x80e40000, 0x80ff0001, 
    0x03000002, 0x80070000, 0xa0e40001, 0xa0e40001, 0x03000005, 0x80070000, 
    0x80e40001, 0x80e40000, 0x02000006, 0x80080001, 0xb0aa0005, 0x03000005, 
    0x80030001, 0x80ff0001, 0xb0e40005, 0x03000005, 0x80080001, 0x80ff0000, 
    0xa0000005, 0x04000004, 0x80030001, 0x80e40004, 0x80ff0001, 0x80e40001, 
    0x03000042, 0x800f0001, 0x80e40001, 0xa0e40802, 0x04000004, 0x80070000, 
    0x80e40000, 0x80e40001, 0x80e40002, 0x02000001, 0x800f0800, 0x80e40000, 
    0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=0 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_13[] =
{
    0xffff0201, 0x0075fffe, 0x42415443, 0x0000001c, 0x000001a9, 0xffff0201, 
    0x00000009, 0x0000001c, 0x00000000, 0x000001a2, 0x000000d0, 0x00040003, 
    0x00000001, 0x000000e0, 0x00000000, 0x000000f0, 0x00030003, 0x00000001, 
    0x00000100, 0x00000000, 0x00000110, 0x00020003, 0x00000001, 0x00000100, 
    0x00000000, 0x0000011f, 0x00050003, 0x00000001, 0x00000100, 0x00000000, 
    0x00000132, 0x00020002, 0x00000001, 0x00000144, 0x00000000, 0x00000154, 
    0x00030002, 0x00000001, 0x00000144, 0x00000000, 0x00000167, 0x00000002, 
    0x00000001, 0x00000144, 0x00000000, 0x00000174, 0x00050002, 0x00000001, 
    0x00000184, 0x00000000, 0x00000194, 0x00010002, 0x00000001, 0x00000144, 
    0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 
    0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 0x656c706d, 
    0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x72666552, 
    0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 0x69547463, 0x6153746e, 
    0x656c706d, 0x5f670072, 0x6d766e45, 0x6f437061, 0x6172746e, 0xab007473, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x6e455f67, 0x70616d76, 
    0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 0x5470616d, 0x00746e69, 
    0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0x73700074, 
    0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 0x44202952, 0x39584433, 
    0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 0xababab00, 0x05000051, 
    0xa00f0004, 0x40000000, 0xbf800000, 0xba800000, 0x3b000000, 0x05000051, 
    0xa00f0006, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 0x3eaaaaab, 0x0200001f, 
    0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 0xb0070001, 0x0200001f, 
    0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 0xb0070003, 0x0200001f, 
    0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 
    0x90000000, 0xa00f0802, 0x0200001f, 0x90000000, 0xa00f0803, 0x0200001f, 
    0x98000000, 0xa00f0804, 0x0200001f, 0x90000000, 0xa00f0805, 0x03000042, 
    0x800f0000, 0xb0e40000, 0xa0e40803, 0x04000004, 0x80070000, 0xa0000004, 
    0x80e40000, 0xa0550004, 0x03000005, 0x80070001, 0x80550000, 0xb0e40003, 
    0x04000004, 0x80070001, 0xb0e40002, 0x80000000, 0x80e40001, 0x04000004, 
    0x80070001, 0xb0e40004, 0x80aa0000, 0x80e40001, 0x03000008, 0x80040000, 
    0x80e40001, 0xb0e40001, 0x03000008, 0x80080001, 0x80e40001, 0x80e40001, 
    0x03000002, 0x80040000, 0x80aa0000, 0x80aa0000, 0x03000005, 0x80070002, 
    0x80ff0001, 0xb0e40001, 0x04000004, 0x80070001, 0x80aa0000, 0x80e40001, 
    0x81e40002, 0x03000042, 0x800f0002, 0xb0e40000, 0xa0e40805, 0x03000042, 
    0x800f0001, 0x80e40001, 0xa0e40804, 0x03000005, 0x80070001, 0x80ff0000, 
    0x80e40001, 0x03000005, 0x80070004, 0x80e40001, 0xa0e40000, 0x04000004, 
    0x80070001, 0x80e40004, 0x80e40004, 0x81e40004, 0x04000004, 0x80070001, 
    0xa0e40002, 0x80e40001, 0x80e40004, 0x03000008, 0x80080002, 0x80e40001, 
    0xa0ff0006, 0x02000006, 0x80040000, 0xb0aa0005, 0x03000005, 0x80030003, 
    0x80aa0000, 0xb0e40005, 0x03000005, 0x80040000, 0x80ff0000, 0xa0000005, 
    0x04000012, 0x80070004, 0xa0e40003, 0x80e40001, 0x80ff0002, 0x04000004, 
    0x80030006, 0x80e40000, 0x80aa0000, 0x80e40003, 0x03000002, 0x80030001, 
    0x80e40006, 0xa0eb0004, 0x03000002, 0x80030000, 0x80e40006, 0xa0aa0004, 
    0x03000042, 0x800f0003, 0x80e40001, 0xa0e40802, 0x03000042, 0x800f0001, 
    0x80e40000, 0xa0e40802, 0x03000005, 0x80070000, 0x80e40003, 0xa0000006, 
    0x03000002, 0x80070005, 0xa0e40001, 0xa0e40001, 0x04000004, 0x80070000, 
    0x80e40001, 0xa0550006, 0x80e40000, 0x03000002, 0x80030003, 0x80e40006, 
    0xa0ee0004, 0x03000002, 0x80030001, 0x80e40006, 0xa0ff0004, 0x03000042, 
    0x800f0001, 0x80e40001, 0xa0e40802, 0x03000042, 0x800f0003, 0x80e40003, 
    0xa0e40802, 0x04000004, 0x80070000, 0x80e40003, 0xa0000006, 0x80e40000, 
    0x03000005, 0x80070003, 0x80e40002, 0x80e40005, 0x04000004, 0x80070000, 
    0x80e40001, 0xa0aa0006, 0x80e40000, 0x04000004, 0x80070000, 0x80e40000, 
    0x80e40003, 0x80e40004, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=0 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_14[] =
{
    0xffff0201, 0x0075fffe, 0x42415443, 0x0000001c, 0x000001a9, 0xffff0201, 
    0x00000009, 0x0000001c, 0x00000000, 0x000001a2, 0x000000d0, 0x00040003, 
    0x00000001, 0x000000e0, 0x00000000, 0x000000f0, 0x00030003, 0x00000001, 
    0x00000100, 0x00000000, 0x00000110, 0x00020003, 0x00000001, 0x00000100, 
    0x00000000, 0x0000011f, 0x00050003, 0x00000001, 0x00000100, 0x00000000, 
    0x00000132, 0x00020002, 0x00000001, 0x00000144, 0x00000000, 0x00000154, 
    0x00030002, 0x00000001, 0x00000144, 0x00000000, 0x00000167, 0x00000002, 
    0x00000001, 0x00000144, 0x00000000, 0x00000174, 0x00050002, 0x00000001, 
    0x00000184, 0x00000000, 0x00000194, 0x00010002, 0x00000001, 0x00000144, 
    0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 
    0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 0x656c706d, 
    0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x72666552, 
    0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 0x69547463, 0x6153746e, 
    0x656c706d, 0x5f670072, 0x6d766e45, 0x6f437061, 0x6172746e, 0xab007473, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x6e455f67, 0x70616d76, 
    0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 0x5470616d, 0x00746e69, 
    0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0x73700074, 
    0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 0x44202952, 0x39584433, 
    0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 0xababab00, 0x05000051, 
    0xa00f0004, 0x40000000, 0xbf800000, 0x3eaaaaab, 0x00000000, 0x0200001f, 
    0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 0xb0070001, 0x0200001f, 
    0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 0xb0070003, 0x0200001f, 
    0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 
    0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 
    0x90000000, 0xa00f0803, 0x0200001f, 0x98000000, 0xa00f0804, 0x0200001f, 
    0x90000000, 0xa00f0805, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40803, 
    0x04000004, 0x80070001, 0xa0000004, 0x80e40000, 0xa0550004, 0x03000005, 
    0x80070000, 0x80550001, 0xb0e40003, 0x04000004, 0x80070000, 0xb0e40002, 
    0x80000001, 0x80e40000, 0x04000004, 0x80070000, 0xb0e40004, 0x80aa0001, 
    0x80e40000, 0x03000008, 0x80080001, 0x80e40000, 0xb0e40001, 0x03000002, 
    0x80080001, 0x80ff0001, 0x80ff0001, 0x03000008, 0x80040001, 0x80e40000, 
    0x80e40000, 0x03000005, 0x80070003, 0x80aa0001, 0xb0e40001, 0x02000006, 
    0x80040001, 0xb0aa0005, 0x03000005, 0x80080002, 0x80ff0000, 0xa0000005, 
    0x03000005, 0x80030005, 0x80aa0001, 0xb0e40005, 0x04000004, 0x80070000, 
    0x80ff0001, 0x80e40000, 0x81e40003, 0x04000004, 0x80030002, 0x80e40001, 
    0x80ff0002, 0x80e40005, 0x03000042, 0x800f0001, 0x80e40000, 0xa0e40804, 
    0x03000042, 0x800f0003, 0xb0e40000, 0xa0e40805, 0x03000005, 0x80070000, 
    0x80ff0000, 0x80e40001, 0x03000005, 0x80070001, 0x80e40000, 0xa0e40000, 
    0x04000004, 0x80070000, 0x80e40001, 0x80e40001, 0x81e40001, 0x04000004, 
    0x80070004, 0xa0e40002, 0x80e40000, 0x80e40001, 0x03000008, 0x80080005, 
    0x80e40004, 0xa0aa0004, 0x03000042, 0x800f0002, 0x80e40002, 0xa0e40802, 
    0x03000042, 0x800f0001, 0x80e40005, 0xa0e40802, 0x03000002, 0x80070000, 
    0xa0e40001, 0xa0e40001, 0x03000005, 0x80070000, 0x80e40003, 0x80e40000, 
    0x03000005, 0x80080001, 0xb0aa0006, 0xb0aa0006, 0x04000004, 0x80070000, 
    0x80e40000, 0x80e40002, 0x81e40001, 0x03000005, 0x80080001, 0x80ff0001, 
    0xb1aa0006, 0x04000012, 0x80070003, 0xa0e40003, 0x80e40004, 0x80ff0005, 
    0x04000004, 0x80070000, 0x80ff0001, 0x80e40000, 0x80e40001, 0x03000002, 
    0x80070000, 0x80e40003, 0x80e40000, 0x02000001, 0x800f0800, 0x80e40000, 
    0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLUR=1 /DFADEOUTONSILHOUETTE=1 /DCUBEMAP=1 /DREFRACTTINTTEXTURE=1
//    /Dmain=main /Emain /Tps_2_a /nologo /Fhtmpshader.h Refract_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalSampler;
//   sampler2D RefractSampler;
//   sampler2D RefractTintSampler;
//   float3 g_EnvmapContrast;
//   float3 g_EnvmapSaturation;
//   float3 g_EnvmapTint;
//   float2 g_RefractScale;
//   float3 g_RefractTint;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_EnvmapTint       c0       1
//   g_RefractTint      c1       1
//   g_EnvmapContrast   c2       1
//   g_EnvmapSaturation c3       1
//   g_RefractScale     c5       1
//   RefractSampler     s2       1
//   NormalSampler      s3       1
//   EnvmapSampler      s4       1
//   RefractTintSampler s5       1
//


static unsigned int pixelShader_Refract_ps20_15[] =
{
    0xffff0201, 0x0075fffe, 0x42415443, 0x0000001c, 0x000001a9, 0xffff0201, 
    0x00000009, 0x0000001c, 0x00000000, 0x000001a2, 0x000000d0, 0x00040003, 
    0x00000001, 0x000000e0, 0x00000000, 0x000000f0, 0x00030003, 0x00000001, 
    0x00000100, 0x00000000, 0x00000110, 0x00020003, 0x00000001, 0x00000100, 
    0x00000000, 0x0000011f, 0x00050003, 0x00000001, 0x00000100, 0x00000000, 
    0x00000132, 0x00020002, 0x00000001, 0x00000144, 0x00000000, 0x00000154, 
    0x00030002, 0x00000001, 0x00000144, 0x00000000, 0x00000167, 0x00000002, 
    0x00000001, 0x00000144, 0x00000000, 0x00000174, 0x00050002, 0x00000001, 
    0x00000184, 0x00000000, 0x00000194, 0x00010002, 0x00000001, 0x00000144, 
    0x00000000, 0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 
    0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 0x61536c61, 0x656c706d, 
    0xabab0072, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x72666552, 
    0x53746361, 0x6c706d61, 0x52007265, 0x61726665, 0x69547463, 0x6153746e, 
    0x656c706d, 0x5f670072, 0x6d766e45, 0x6f437061, 0x6172746e, 0xab007473, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x6e455f67, 0x70616d76, 
    0x75746153, 0x69746172, 0x67006e6f, 0x766e455f, 0x5470616d, 0x00746e69, 
    0x65525f67, 0x63617266, 0x61635374, 0xab00656c, 0x00030001, 0x00020001, 
    0x00000001, 0x00000000, 0x65525f67, 0x63617266, 0x6e695474, 0x73700074, 
    0x615f325f, 0x63694d00, 0x6f736f72, 0x28207466, 0x44202952, 0x39584433, 
    0x61685320, 0x20726564, 0x706d6f43, 0x72656c69, 0xababab00, 0x05000051, 
    0xa00f0004, 0x40000000, 0xbf800000, 0xba800000, 0x3b000000, 0x05000051, 
    0xa00f0006, 0x3e638e37, 0x3ee38e37, 0x3de38e37, 0x3eaaaaab, 0x0200001f, 
    0x80000000, 0xb0030000, 0x0200001f, 0x80000000, 0xb0070001, 0x0200001f, 
    0x80000000, 0xb0070002, 0x0200001f, 0x80000000, 0xb0070003, 0x0200001f, 
    0x80000000, 0xb0070004, 0x0200001f, 0x80000000, 0xb0070005, 0x0200001f, 
    0x80000000, 0xb0070006, 0x0200001f, 0x90000000, 0xa00f0802, 0x0200001f, 
    0x90000000, 0xa00f0803, 0x0200001f, 0x98000000, 0xa00f0804, 0x0200001f, 
    0x90000000, 0xa00f0805, 0x02000006, 0x80080000, 0xb0aa0005, 0x03000005, 
    0x80030001, 0x80ff0000, 0xb0e40005, 0x03000042, 0x800f0000, 0xb0e40000, 
    0xa0e40803, 0x03000005, 0x80080001, 0x80ff0000, 0xa0000005, 0x04000004, 
    0x80070000, 0xa0000004, 0x80e40000, 0xa0550004, 0x03000002, 0x80070006, 
    0xa0e40001, 0xa0e40001, 0x04000004, 0x80030007, 0x80e40000, 0x80ff0001, 
    0x80e40001, 0x03000042, 0x800f0003, 0xb0e40000, 0xa0e40805, 0x03000042, 
    0x800f0001, 0x80e40001, 0xa0e40802, 0x03000002, 0x80030004, 0x80e40007, 
    0xa0eb0004, 0x03000002, 0x80030002, 0x80e40007, 0xa0aa0004, 0x03000042, 
    0x800f0004, 0x80e40004, 0xa0e40802, 0x03000042, 0x800f0002, 0x80e40002, 
    0xa0e40802, 0x03000005, 0x80070005, 0x80e40004, 0xa0000006, 0x03000005, 
    0x80070004, 0x80e40006, 0x80e40003, 0x04000004, 0x80070006, 0x80e40002, 
    0xa0550006, 0x80e40005, 0x03000002, 0x80030003, 0x80e40007, 0xa0ee0004, 
    0x03000002, 0x80030002, 0x80e40007, 0xa0ff0004, 0x03000042, 0x800f0002, 
    0x80e40002, 0xa0e40802, 0x03000042, 0x800f0003, 0x80e40003, 0xa0e40802, 
    0x03000005, 0x80070005, 0x80550000, 0xb0e40003, 0x04000004, 0x80070005, 
    0xb0e40002, 0x80000000, 0x80e40005, 0x04000004, 0x80070000, 0xb0e40004, 
    0x80aa0000, 0x80e40005, 0x03000008, 0x80080001, 0x80e40000, 0xb0e40001, 
    0x03000008, 0x80080002, 0x80e40000, 0x80e40000, 0x03000002, 0x80080001, 
    0x80ff0001, 0x80ff0001, 0x03000005, 0x80070007, 0x80ff0002, 0xb0e40001, 
    0x04000004, 0x80070005, 0x80e40003, 0xa0000006, 0x80e40006, 0x04000004, 
    0x80070000, 0x80ff0001, 0x80e40000, 0x81e40007, 0x03000042, 0x800f0003, 
    0x80e40000, 0xa0e40804, 0x03000005, 0x80070003, 0x80ff0000, 0x80e40003, 
    0x04000004, 0x80070000, 0x80e40002, 0xa0aa0006, 0x80e40005, 0x03000005, 
    0x80070003, 0x80e40003, 0xa0e40000, 0x04000004, 0x80070000, 0x80e40000, 
    0x80e40004, 0x81e40001, 0x04000004, 0x80070002, 0x80e40003, 0x80e40003, 
    0x81e40003, 0x03000005, 0x80080001, 0xb0aa0006, 0xb0aa0006, 0x04000004, 
    0x80070002, 0xa0e40002, 0x80e40002, 0x80e40003, 0x03000005, 0x80080001, 
    0x80ff0001, 0xb1aa0006, 0x03000008, 0x80080003, 0x80e40002, 0xa0ff0006, 
    0x04000004, 0x80070000, 0x80ff0001, 0x80e40000, 0x80e40001, 0x04000012, 
    0x80070001, 0xa0e40003, 0x80e40002, 0x80ff0003, 0x03000002, 0x80070000, 
    0x80e40000, 0x80e40001, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
static PrecompiledShaderByteCode_t Refract_ps20_pixel_shaders[16] = 
{
	{ pixelShader_Refract_ps20_0, sizeof( pixelShader_Refract_ps20_0 ) },
	{ pixelShader_Refract_ps20_1, sizeof( pixelShader_Refract_ps20_1 ) },
	{ pixelShader_Refract_ps20_2, sizeof( pixelShader_Refract_ps20_2 ) },
	{ pixelShader_Refract_ps20_3, sizeof( pixelShader_Refract_ps20_3 ) },
	{ pixelShader_Refract_ps20_4, sizeof( pixelShader_Refract_ps20_4 ) },
	{ pixelShader_Refract_ps20_5, sizeof( pixelShader_Refract_ps20_5 ) },
	{ pixelShader_Refract_ps20_6, sizeof( pixelShader_Refract_ps20_6 ) },
	{ pixelShader_Refract_ps20_7, sizeof( pixelShader_Refract_ps20_7 ) },
	{ pixelShader_Refract_ps20_8, sizeof( pixelShader_Refract_ps20_8 ) },
	{ pixelShader_Refract_ps20_9, sizeof( pixelShader_Refract_ps20_9 ) },
	{ pixelShader_Refract_ps20_10, sizeof( pixelShader_Refract_ps20_10 ) },
	{ pixelShader_Refract_ps20_11, sizeof( pixelShader_Refract_ps20_11 ) },
	{ pixelShader_Refract_ps20_12, sizeof( pixelShader_Refract_ps20_12 ) },
	{ pixelShader_Refract_ps20_13, sizeof( pixelShader_Refract_ps20_13 ) },
	{ pixelShader_Refract_ps20_14, sizeof( pixelShader_Refract_ps20_14 ) },
	{ pixelShader_Refract_ps20_15, sizeof( pixelShader_Refract_ps20_15 ) },
};
struct Refract_ps20PixelShader_t : public PrecompiledShader_t
{
	Refract_ps20PixelShader_t()
	{
		m_nFlags = SHADER_CUSTOM_ENUMERATION;
		m_nCentroidMask = 0x0;
		m_pByteCode = Refract_ps20_pixel_shaders;
		m_nShaderCount = 16;
		m_pName = "Refract_ps20";
		m_nDynamicCombos = 1;
		GetShaderDLL()->InsertPrecompiledShader( PRECOMPILED_PIXEL_SHADER, this );
	}
};
static Refract_ps20PixelShader_t Refract_ps20_PixelShaderInstance;
#endif // DEFINE_SHADERS
