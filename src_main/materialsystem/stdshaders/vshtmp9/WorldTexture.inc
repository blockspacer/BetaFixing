//
// Generated by Microsoft (R) D3DX9 Shader Assembler
//
//  Source: vshtmp9\vertexShader_WorldTexture_none_none_none_none_0_rangefog.tmp
//  Flags: /Zi 
//


 static unsigned int vertexShader_WorldTexture_none_none_none_none_0_rangefog[] =
{
    0xfffe0101, 0x0047fffe, 0x47554244, 0x00000028, 0x00000100, 0x00000000, 
    0x00000001, 0x000000b4, 0x00000009, 0x000000b8, 0x00000000, 0x00000000, 
    0x00000000, 0x505c3a43, 0x656a6f72, 0x5c737463, 0x61746542, 0x65786946, 
    0x65425c72, 0x69466174, 0x676e6978, 0x6372735c, 0x69616d5f, 0x616d5c6e, 
    0x69726574, 0x79736c61, 0x6d657473, 0x6474735c, 0x64616873, 0x5c737265, 
    0x74687376, 0x5c39706d, 0x74726576, 0x68537865, 0x72656461, 0x726f575f, 
    0x6554646c, 0x72757478, 0x6f6e5f65, 0x6e5f656e, 0x5f656e6f, 0x656e6f6e, 
    0x6e6f6e5f, 0x5f305f65, 0x676e6172, 0x676f6665, 0x706d742e, 0xababab00, 
    0x00000028, 0x00000009, 0x00000124, 0x0000000a, 0x00000130, 0x0000000f, 
    0x0000013c, 0x00000010, 0x0000014c, 0x00000011, 0x0000015c, 0x00000012, 
    0x0000016c, 0x00000013, 0x0000017c, 0x00000026, 0x00000188, 0x00000032, 
    0x0000019c, 0x58443344, 0x68532039, 0x72656461, 0x73734120, 0x6c626d65, 
    0xab007265, 0x0000001f, 0x80000000, 0x900f0000, 0x0000001f, 0x80000005, 
    0x900f0007, 0x00000009, 0x80010000, 0x90e40000, 0xa0e40008, 0x00000009, 
    0x80020000, 0x90e40000, 0xa0e40009, 0x00000009, 0x80040000, 0x90e40000, 
    0xa0e4000a, 0x00000009, 0x80080000, 0x90e40000, 0xa0e4000b, 0x00000001, 
    0xc00f0000, 0x80e40000, 0x00000004, 0xc00f0001, 0x81aa0000, 0xa0ff0010, 
    0xa0000010, 0x00000001, 0xe00f0000, 0x90e40007, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Assembler
//
//  Source: vshtmp9\vertexShader_WorldTexture_none_none_none_none_0_heightfog.tmp
//  Flags: /Zi 
//


 static unsigned int vertexShader_WorldTexture_none_none_none_none_0_heightfog[] =
{
    0xfffe0101, 0x0053fffe, 0x47554244, 0x00000028, 0x00000130, 0x00000000, 
    0x00000001, 0x000000b4, 0x0000000f, 0x000000b8, 0x00000000, 0x00000000, 
    0x00000000, 0x505c3a43, 0x656a6f72, 0x5c737463, 0x61746542, 0x65786946, 
    0x65425c72, 0x69466174, 0x676e6978, 0x6372735c, 0x69616d5f, 0x616d5c6e, 
    0x69726574, 0x79736c61, 0x6d657473, 0x6474735c, 0x64616873, 0x5c737265, 
    0x74687376, 0x5c39706d, 0x74726576, 0x68537865, 0x72656461, 0x726f575f, 
    0x6554646c, 0x72757478, 0x6f6e5f65, 0x6e5f656e, 0x5f656e6f, 0x656e6f6e, 
    0x6e6f6e5f, 0x5f305f65, 0x67696568, 0x6f667468, 0x6d742e67, 0xabab0070, 
    0x00000028, 0x00000009, 0x00000154, 0x0000000a, 0x00000160, 0x0000000f, 
    0x0000016c, 0x00000010, 0x0000017c, 0x00000011, 0x0000018c, 0x00000012, 
    0x0000019c, 0x00000013, 0x000001ac, 0x0000001d, 0x000001b8, 0x00000030, 
    0x000001c8, 0x00000035, 0x000001d8, 0x00000037, 0x000001e8, 0x00000038, 
    0x000001f4, 0x00000040, 0x00000204, 0x00000042, 0x00000214, 0x00000053, 
    0x00000228, 0x58443344, 0x68532039, 0x72656461, 0x73734120, 0x6c626d65, 
    0xab007265, 0x0000001f, 0x80000000, 0x900f0000, 0x0000001f, 0x80000005, 
    0x900f0007, 0x00000009, 0x80010000, 0x90e40000, 0xa0e40008, 0x00000009, 
    0x80020000, 0x90e40000, 0xa0e40009, 0x00000009, 0x80040000, 0x90e40000, 
    0xa0e4000a, 0x00000009, 0x80080000, 0x90e40000, 0xa0e4000b, 0x00000001, 
    0xc00f0000, 0x80e40000, 0x00000009, 0x80040001, 0x90e40000, 0xa0e4002c, 
    0x00000002, 0x80030002, 0xa0ab0002, 0x81aa0001, 0x0000000b, 0x80010002, 
    0x80000002, 0xa0000000, 0x00000006, 0x80040002, 0x80550002, 0x00000005, 
    0x80080002, 0x80000002, 0x80aa0002, 0x00000005, 0x80080002, 0x80ff0002, 
    0x80aa0000, 0x00000004, 0xc00f0001, 0x81ff0002, 0xa0ff0010, 0xa0550010, 
    0x00000001, 0xe00f0000, 0x90e40007, 0x0000ffff
};
static PrecompiledShaderByteCode_t WorldTexture_vertex_shaders[] = {
{ 	vertexShader_WorldTexture_none_none_none_none_0_rangefog, sizeof( 	vertexShader_WorldTexture_none_none_none_none_0_rangefog ) },
{ 	vertexShader_WorldTexture_none_none_none_none_0_heightfog, sizeof( 	vertexShader_WorldTexture_none_none_none_none_0_heightfog ) },
};
struct WorldTexture_VertexShader_t : public PrecompiledShader_t
{
	WorldTexture_VertexShader_t()
	{
		m_nFlags = 0;
		m_nFlags |= SHADER_USES_HEIGHT_FOG;
		m_nFlags |= SHADER_USES_MODEL_MATRIX;
		m_pByteCode = WorldTexture_vertex_shaders;
		m_pName = "WorldTexture";
		m_nShaderCount = 2;
		GetShaderDLL()->InsertPrecompiledShader( PRECOMPILED_VERTEX_SHADER, this );
	}
};
static WorldTexture_VertexShader_t WorldTexture_VertexShaderInstance;
