class watercheap_ps20_Index
{
private:
	int m_nBLEND;
#ifdef _DEBUG
	bool m_bBLEND;
#endif
public:
	void SetBLEND( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nBLEND = i;
#ifdef _DEBUG
		m_bBLEND = true;
#endif
	}
	void SetBLEND( bool i )
	{
		m_nBLEND = i ? 1 : 0;
#ifdef _DEBUG
		m_bBLEND = true;
#endif
	}
public:
	watercheap_ps20_Index()
	{
#ifdef _DEBUG
		m_bBLEND = false;
#endif // _DEBUG
		m_nBLEND = 0;
	}
	int GetIndex()
	{
		// Asserts to make sure that we aren't using any skipped combinations.
		// Asserts to make sure that we are setting all of the combination vars.
#ifdef _DEBUG
		bool bAllStaticVarsDefined = m_bBLEND;
		bool bNoStaticVarsDefined = !m_bBLEND;
		Assert( bAllStaticVarsDefined != bNoStaticVarsDefined );
#endif // _DEBUG
		return ( 1 * m_nBLEND ) + 0;
	}
};
#ifdef DEFINE_SHADERS
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLEND=0 /Dmain=main /Emain /Tps_2_0 /nologo /Fhtmpshader.h
//    WaterCheap_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalMapSampler;
//   samplerCUBE NormalizeSampler;
//   float3 g_FogColor;
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   g_FogColor       c0       1
//   EnvmapSampler    s0       1
//   NormalMapSampler s1       1
//   NormalizeSampler s6       1
//


static unsigned int pixelShader_WaterCheap_ps20_0[] =
{
    0xffff0200, 0x0043fffe, 0x42415443, 0x0000001c, 0x000000e3, 0xffff0200, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000dc, 0x0000006c, 0x00000003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00010003, 0x00000001, 
    0x000000a0, 0x00000000, 0x000000b0, 0x00060003, 0x00000001, 0x0000007c, 
    0x00000000, 0x000000c1, 0x00000002, 0x00000001, 0x000000cc, 0x00000000, 
    0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 0x00010001, 
    0x00000001, 0x00000000, 0x6d726f4e, 0x614d6c61, 0x6d615370, 0x72656c70, 
    0xababab00, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x6d726f4e, 
    0x7a696c61, 0x6d615365, 0x72656c70, 0x465f6700, 0x6f43676f, 0x00726f6c, 
    0x00030001, 0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00305f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x05000051, 0xa00f0001, 0x40000000, 
    0xbf800000, 0x00000000, 0x3f800000, 0x0200001f, 0x80000000, 0xb0030000, 
    0x0200001f, 0x80000000, 0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 
    0x0200001f, 0x80000000, 0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 
    0x0200001f, 0x98000000, 0xa00f0800, 0x0200001f, 0x90000000, 0xa00f0801, 
    0x0200001f, 0x98000000, 0xa00f0806, 0x03000042, 0x800f0001, 0xb0e40001, 
    0xa0e40806, 0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40801, 0x04000004, 
    0x80070001, 0xa0000001, 0x80e40001, 0xa0550001, 0x04000004, 0x80070002, 
    0xa0000001, 0x80e40000, 0xa0550001, 0x03000008, 0x80010000, 0x80e40002, 
    0xb0e40002, 0x03000008, 0x80020000, 0x80e40002, 0xb0e40003, 0x03000008, 
    0x80040000, 0x80e40002, 0xb0e40004, 0x03000008, 0x80010003, 0x80e40000, 
    0x80e40000, 0x03000008, 0x80010002, 0x80e40000, 0x80e40001, 0x03000005, 
    0x80070001, 0x80e40001, 0x80000003, 0x03000002, 0x80080000, 0x80000002, 
    0x80000002, 0x0300000b, 0x80080001, 0x80000002, 0xa0aa0001, 0x04000004, 
    0x80070000, 0x80ff0000, 0x80e40000, 0x81e40001, 0x03000042, 0x800f0000, 
    0x80e40000, 0xa0e40800, 0x03000002, 0x80080000, 0x81ff0001, 0xa0ff0001, 
    0x03000005, 0x80080001, 0x80ff0000, 0x80ff0000, 0x03000005, 0x80080001, 
    0x80ff0001, 0x80ff0001, 0x03000005, 0x80080000, 0x80ff0000, 0x80ff0001, 
    0x04000004, 0x80070000, 0x80e40000, 0x80ff0000, 0xa0e40000, 0x02000001, 
    0x80080000, 0xa0ff0001, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DBLEND=1 /Dmain=main /Emain /Tps_2_0 /nologo /Fhtmpshader.h
//    WaterCheap_ps20.fxc
//
//
// Parameters:
//
//   samplerCUBE EnvmapSampler;
//   sampler2D NormalMapSampler;
//   float4 g_CheapWaterParams;
//   float3 g_FogColor;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   g_FogColor         c0       1
//   g_CheapWaterParams c1       1
//   EnvmapSampler      s0       1
//   NormalMapSampler   s1       1
//


static unsigned int pixelShader_WaterCheap_ps20_1[] =
{
    0xffff0200, 0x0048fffe, 0x42415443, 0x0000001c, 0x000000f7, 0xffff0200, 
    0x00000004, 0x0000001c, 0x00000000, 0x000000f0, 0x0000006c, 0x00000003, 
    0x00000001, 0x0000007c, 0x00000000, 0x0000008c, 0x00010003, 0x00000001, 
    0x000000a0, 0x00000000, 0x000000b0, 0x00010002, 0x00000001, 0x000000c4, 
    0x00000000, 0x000000d4, 0x00000002, 0x00000001, 0x000000e0, 0x00000000, 
    0x6d766e45, 0x61537061, 0x656c706d, 0xabab0072, 0x000e0004, 0x00010001, 
    0x00000001, 0x00000000, 0x6d726f4e, 0x614d6c61, 0x6d615370, 0x72656c70, 
    0xababab00, 0x000c0004, 0x00010001, 0x00000001, 0x00000000, 0x68435f67, 
    0x57706165, 0x72657461, 0x61726150, 0xab00736d, 0x00030001, 0x00040001, 
    0x00000001, 0x00000000, 0x6f465f67, 0x6c6f4367, 0xab00726f, 0x00030001, 
    0x00030001, 0x00000001, 0x00000000, 0x325f7370, 0x4d00305f, 0x6f726369, 
    0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 0x6f432072, 
    0x6c69706d, 0xab007265, 0x05000051, 0xa00f0002, 0x40000000, 0xbf800000, 
    0x00000000, 0x3f800000, 0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 
    0x80000000, 0xb0070001, 0x0200001f, 0x80000000, 0xb0070002, 0x0200001f, 
    0x80000000, 0xb0070003, 0x0200001f, 0x80000000, 0xb0070004, 0x0200001f, 
    0x98000000, 0xa00f0800, 0x0200001f, 0x90000000, 0xa00f0801, 0x03000042, 
    0x800f0000, 0xb0e40000, 0xa0e40801, 0x03000008, 0x80010003, 0xb0e40001, 
    0xb0e40001, 0x02000007, 0x80080000, 0x80000003, 0x03000005, 0x80070001, 
    0x80ff0000, 0xb0e40001, 0x04000004, 0x80070002, 0xa0000002, 0x80e40000, 
    0xa0550002, 0x03000008, 0x80010000, 0x80e40002, 0xb0e40002, 0x03000008, 
    0x80020000, 0x80e40002, 0xb0e40003, 0x03000008, 0x80040000, 0x80e40002, 
    0xb0e40004, 0x03000008, 0x80010002, 0x80e40000, 0x80e40000, 0x02000007, 
    0x80080004, 0x80000003, 0x03000005, 0x80080001, 0x80ff0004, 0x80000003, 
    0x03000008, 0x80010003, 0x80e40000, 0x80e40001, 0x03000005, 0x80070001, 
    0x80e40001, 0x80000002, 0x03000002, 0x80080000, 0x80000003, 0x80000003, 
    0x0300000b, 0x80080002, 0x80000003, 0xa0aa0002, 0x04000004, 0x80070000, 
    0x80ff0000, 0x80e40000, 0x81e40001, 0x03000042, 0x800f0000, 0x80e40000, 
    0xa0e40800, 0x03000002, 0x80080000, 0x81ff0002, 0xa0ff0002, 0x03000005, 
    0x80080002, 0x80ff0000, 0x80ff0000, 0x03000005, 0x80080002, 0x80ff0002, 
    0x80ff0002, 0x03000005, 0x80080000, 0x80ff0000, 0x80ff0002, 0x04000004, 
    0x80070000, 0x80e40000, 0x80ff0000, 0xa0e40000, 0x04000004, 0x80080000, 
    0x80ff0001, 0xa0aa0001, 0xa1ff0001, 0x02000001, 0x800f0800, 0x80e40000, 
    0x0000ffff
};
static PrecompiledShaderByteCode_t WaterCheap_ps20_pixel_shaders[2] = 
{
	{ pixelShader_WaterCheap_ps20_0, sizeof( pixelShader_WaterCheap_ps20_0 ) },
	{ pixelShader_WaterCheap_ps20_1, sizeof( pixelShader_WaterCheap_ps20_1 ) },
};
struct WaterCheap_ps20PixelShader_t : public PrecompiledShader_t
{
	WaterCheap_ps20PixelShader_t()
	{
		m_nFlags = SHADER_CUSTOM_ENUMERATION;
		m_nCentroidMask = 0x0;
		m_pByteCode = WaterCheap_ps20_pixel_shaders;
		m_nShaderCount = 2;
		m_pName = "WaterCheap_ps20";
		m_nDynamicCombos = 1;
		GetShaderDLL()->InsertPrecompiledShader( PRECOMPILED_PIXEL_SHADER, this );
	}
};
static WaterCheap_ps20PixelShader_t WaterCheap_ps20_PixelShaderInstance;
#endif // DEFINE_SHADERS
