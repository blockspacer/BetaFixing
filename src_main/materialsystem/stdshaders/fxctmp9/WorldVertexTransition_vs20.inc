class worldvertextransition_vs20_Index
{
private:
	int m_nFOG_TYPE;
#ifdef _DEBUG
	bool m_bFOG_TYPE;
#endif
public:
	void SetFOG_TYPE( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nFOG_TYPE = i;
#ifdef _DEBUG
		m_bFOG_TYPE = true;
#endif
	}
	void SetFOG_TYPE( bool i )
	{
		m_nFOG_TYPE = i ? 1 : 0;
#ifdef _DEBUG
		m_bFOG_TYPE = true;
#endif
	}
public:
	worldvertextransition_vs20_Index()
	{
#ifdef _DEBUG
		m_bFOG_TYPE = false;
#endif // _DEBUG
		m_nFOG_TYPE = 0;
	}
	int GetIndex()
	{
		// Asserts to make sure that we aren't using any skipped combinations.
		// Asserts to make sure that we are setting all of the combination vars.
#ifdef _DEBUG
		bool bAllStaticVarsDefined = m_bFOG_TYPE;
		bool bNoStaticVarsDefined = !m_bFOG_TYPE;
		Assert( bAllStaticVarsDefined != bNoStaticVarsDefined );
#endif // _DEBUG
		return ( 1 * m_nFOG_TYPE ) + 0;
	}
};
#ifdef DEFINE_SHADERS
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DFOG_TYPE=0 /Dmain=main /Emain /Tvs_2_0 /nologo /Fhtmpshader.h
//    WorldVertexTransition_vs20.fxc
//
//
// Parameters:
//
//   float4 cBaseTexCoordTransform[2];
//   float4 cBaseTexCoordTransform2[2];
//   float4 cFogParams;
//   float4 cMacrosTexCoordTransform[2];
//   float4x3 cModel[16];
//   float4x4 cViewProj;
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   cViewProj                c8       4
//   cFogParams               c16      1
//   cModel                   c42      3
//   cBaseTexCoordTransform   c90      2
//   cBaseTexCoordTransform2  c92      2
//   cMacrosTexCoordTransform c94      2
//


static unsigned int pixelShader_WorldVertexTransition_vs20_0[] =
{
    0xfffe0200, 0x005bfffe, 0x42415443, 0x0000001c, 0x00000143, 0xfffe0200, 
    0x00000006, 0x0000001c, 0x00000000, 0x0000013c, 0x00000094, 0x005a0002, 
    0x00000002, 0x000000ac, 0x00000000, 0x000000bc, 0x005c0002, 0x00000002, 
    0x000000ac, 0x00000000, 0x000000d4, 0x00100002, 0x00000001, 0x000000e0, 
    0x00000000, 0x000000f0, 0x005e0002, 0x00000002, 0x000000ac, 0x00000000, 
    0x00000109, 0x002a0002, 0x00000003, 0x00000110, 0x00000000, 0x00000120, 
    0x00080002, 0x00000004, 0x0000012c, 0x00000000, 0x73614263, 0x78655465, 
    0x726f6f43, 0x61725464, 0x6f66736e, 0xab006d72, 0x00030001, 0x00040001, 
    0x00000002, 0x00000000, 0x73614263, 0x78655465, 0x726f6f43, 0x61725464, 
    0x6f66736e, 0x00326d72, 0x676f4663, 0x61726150, 0xab00736d, 0x00030001, 
    0x00040001, 0x00000001, 0x00000000, 0x63614d63, 0x54736f72, 0x6f437865, 
    0x5464726f, 0x736e6172, 0x6d726f66, 0x6f4d6300, 0x006c6564, 0x00030003, 
    0x00030004, 0x00000010, 0x00000000, 0x65695663, 0x6f725077, 0xabab006a, 
    0x00030003, 0x00040004, 0x00000001, 0x00000000, 0x325f7376, 0x4d00305f, 
    0x6f726369, 0x74666f73, 0x29522820, 0x44334420, 0x53203958, 0x65646168, 
    0x6f432072, 0x6c69706d, 0xab007265, 0x0200001f, 0x80000000, 0x900f0000, 
    0x0200001f, 0x8000000a, 0x900f0001, 0x0200001f, 0x80000005, 0x900f0002, 
    0x0200001f, 0x80010005, 0x900f0003, 0x03000009, 0x80010000, 0x90e40000, 
    0xa0e4002a, 0x03000009, 0x80020000, 0x90e40000, 0xa0e4002b, 0x03000009, 
    0x80040000, 0x90e40000, 0xa0e4002c, 0x02000001, 0x80080000, 0xa0550000, 
    0x03000009, 0xc0010000, 0x80e40000, 0xa0e40008, 0x03000009, 0xc0020000, 
    0x80e40000, 0xa0e40009, 0x03000009, 0xc0080000, 0x80e40000, 0xa0e4000b, 
    0x03000009, 0x80020000, 0x80e40000, 0xa0e4000a, 0x04000004, 0xc00f0001, 
    0x81550000, 0xa0ff0010, 0xa0000010, 0x02000001, 0xc0040000, 0x80550000, 
    0x03000009, 0xe0010000, 0x90e40002, 0xa0e4005a, 0x03000009, 0xe0020000, 
    0x90e40002, 0xa0e4005b, 0x03000009, 0xe0010001, 0x90e40002, 0xa0e4005c, 
    0x03000009, 0xe0020001, 0x90e40002, 0xa0e4005d, 0x03000009, 0xe0010003, 
    0x90e40002, 0xa0e4005e, 0x03000009, 0xe0020003, 0x90e40002, 0xa0e4005f, 
    0x02000001, 0xe0030002, 0x90e40003, 0x02000001, 0xd00f0000, 0x90e40001, 
    0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DFOG_TYPE=1 /Dmain=main /Emain /Tvs_2_0 /nologo /Fhtmpshader.h
//    WorldVertexTransition_vs20.fxc
//
//
// Parameters:
//
//   float4 cBaseTexCoordTransform[2];
//   float4 cBaseTexCoordTransform2[2];
//   float4 cEyePosWaterZ;
//   float4 cFogParams;
//   float4 cMacrosTexCoordTransform[2];
//   float4x3 cModel[16];
//   float4x4 cViewProj;
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   cEyePosWaterZ            c2       1
//   cViewProj                c8       4
//   cFogParams               c16      1
//   cModel                   c42      3
//   cBaseTexCoordTransform   c90      2
//   cBaseTexCoordTransform2  c92      2
//   cMacrosTexCoordTransform c94      2
//


static unsigned int pixelShader_WorldVertexTransition_vs20_1[] =
{
    0xfffe0200, 0x0064fffe, 0x42415443, 0x0000001c, 0x00000167, 0xfffe0200, 
    0x00000007, 0x0000001c, 0x00000000, 0x00000160, 0x000000a8, 0x005a0002, 
    0x00000002, 0x000000c0, 0x00000000, 0x000000d0, 0x005c0002, 0x00000002, 
    0x000000c0, 0x00000000, 0x000000e8, 0x00020002, 0x00000001, 0x000000f8, 
    0x00000000, 0x00000108, 0x00100002, 0x00000001, 0x000000f8, 0x00000000, 
    0x00000113, 0x005e0002, 0x00000002, 0x000000c0, 0x00000000, 0x0000012c, 
    0x002a0002, 0x00000003, 0x00000134, 0x00000000, 0x00000144, 0x00080002, 
    0x00000004, 0x00000150, 0x00000000, 0x73614263, 0x78655465, 0x726f6f43, 
    0x61725464, 0x6f66736e, 0xab006d72, 0x00030001, 0x00040001, 0x00000002, 
    0x00000000, 0x73614263, 0x78655465, 0x726f6f43, 0x61725464, 0x6f66736e, 
    0x00326d72, 0x65794563, 0x57736f50, 0x72657461, 0xabab005a, 0x00030001, 
    0x00040001, 0x00000001, 0x00000000, 0x676f4663, 0x61726150, 0x6300736d, 
    0x7263614d, 0x6554736f, 0x6f6f4378, 0x72546472, 0x66736e61, 0x006d726f, 
    0x646f4d63, 0xab006c65, 0x00030003, 0x00030004, 0x00000010, 0x00000000, 
    0x65695663, 0x6f725077, 0xabab006a, 0x00030003, 0x00040004, 0x00000001, 
    0x00000000, 0x325f7376, 0x4d00305f, 0x6f726369, 0x74666f73, 0x29522820, 
    0x44334420, 0x53203958, 0x65646168, 0x6f432072, 0x6c69706d, 0xab007265, 
    0x0200001f, 0x80000000, 0x900f0000, 0x0200001f, 0x8000000a, 0x900f0001, 
    0x0200001f, 0x80000005, 0x900f0002, 0x0200001f, 0x80010005, 0x900f0003, 
    0x03000009, 0x80010000, 0x90e40000, 0xa0e4002a, 0x03000009, 0x80020000, 
    0x90e40000, 0xa0e4002b, 0x02000001, 0x80080000, 0xa0550000, 0x03000009, 
    0x80040000, 0x90e40000, 0xa0e4002c, 0x03000009, 0xc0010000, 0x80e40000, 
    0xa0e40008, 0x03000009, 0xc0020000, 0x80e40000, 0xa0e40009, 0x03000002, 
    0x80030001, 0x81aa0000, 0xa0eb0002, 0x0300000b, 0x80080001, 0x80000001, 
    0xa0000000, 0x02000006, 0x80080002, 0x80550001, 0x03000009, 0x80020001, 
    0x80e40000, 0xa0e4000a, 0x03000005, 0x80080001, 0x80ff0001, 0x80ff0002, 
    0x03000009, 0xc0080000, 0x80e40000, 0xa0e4000b, 0x03000005, 0x80080000, 
    0x80550001, 0x80ff0001, 0x02000001, 0xc0040000, 0x80550001, 0x04000004, 
    0xc00f0001, 0x81ff0000, 0xa0ff0010, 0xa0550010, 0x03000009, 0xe0010000, 
    0x90e40002, 0xa0e4005a, 0x03000009, 0xe0020000, 0x90e40002, 0xa0e4005b, 
    0x03000009, 0xe0010001, 0x90e40002, 0xa0e4005c, 0x03000009, 0xe0020001, 
    0x90e40002, 0xa0e4005d, 0x03000009, 0xe0010003, 0x90e40002, 0xa0e4005e, 
    0x03000009, 0xe0020003, 0x90e40002, 0xa0e4005f, 0x02000001, 0xe0030002, 
    0x90e40003, 0x02000001, 0xd00f0000, 0x90e40001, 0x0000ffff
};
static PrecompiledShaderByteCode_t WorldVertexTransition_vs20_pixel_shaders[2] = 
{
	{ pixelShader_WorldVertexTransition_vs20_0, sizeof( pixelShader_WorldVertexTransition_vs20_0 ) },
	{ pixelShader_WorldVertexTransition_vs20_1, sizeof( pixelShader_WorldVertexTransition_vs20_1 ) },
};
struct WorldVertexTransition_vs20PixelShader_t : public PrecompiledShader_t
{
	WorldVertexTransition_vs20PixelShader_t()
	{
		m_nFlags = SHADER_CUSTOM_ENUMERATION;
		m_nCentroidMask = 0x0;
		m_pByteCode = WorldVertexTransition_vs20_pixel_shaders;
		m_nShaderCount = 2;
		m_pName = "WorldVertexTransition_vs20";
		m_nDynamicCombos = 1;
		GetShaderDLL()->InsertPrecompiledShader( PRECOMPILED_VERTEX_SHADER, this );
	}
};
static WorldVertexTransition_vs20PixelShader_t WorldVertexTransition_vs20_PixelShaderInstance;
#endif // DEFINE_SHADERS
