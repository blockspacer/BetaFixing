class worldvertexalpha_ps20_Index
{
private:
	int m_nPASS;
#ifdef _DEBUG
	bool m_bPASS;
#endif
public:
	void SetPASS( int i )
	{
		Assert( i >= 0 && i <= 1 );
		m_nPASS = i;
#ifdef _DEBUG
		m_bPASS = true;
#endif
	}
	void SetPASS( bool i )
	{
		m_nPASS = i ? 1 : 0;
#ifdef _DEBUG
		m_bPASS = true;
#endif
	}
public:
	worldvertexalpha_ps20_Index()
	{
#ifdef _DEBUG
		m_bPASS = false;
#endif // _DEBUG
		m_nPASS = 0;
	}
	int GetIndex()
	{
		// Asserts to make sure that we aren't using any skipped combinations.
		// Asserts to make sure that we are setting all of the combination vars.
#ifdef _DEBUG
		bool bAllStaticVarsDefined = m_bPASS;
		bool bNoStaticVarsDefined = !m_bPASS;
		Assert( bAllStaticVarsDefined != bNoStaticVarsDefined );
#endif // _DEBUG
		return ( 1 * m_nPASS ) + 0;
	}
};
#ifdef DEFINE_SHADERS
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DPASS=0 /Dmain=main /Emain /Tps_2_0 /nologo /Fhtmpshader.h
//    WorldVertexAlpha_ps20.fxc
//
//
// Parameters:
//
//   sampler2D BaseSampler;
//   sampler2D LightmapAlphaSampler;
//   sampler2D LightmapSampler;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   BaseSampler          s0       1
//   LightmapSampler      s1       1
//   LightmapAlphaSampler s2       1
//


static unsigned int pixelShader_WorldVertexAlpha_ps20_0[] =
{
    0xffff0200, 0x0032fffe, 0x42415443, 0x0000001c, 0x000000a0, 0xffff0200, 
    0x00000003, 0x0000001c, 0x00000000, 0x00000099, 0x00000058, 0x00000003, 
    0x00000001, 0x00000064, 0x00000000, 0x00000074, 0x00020003, 0x00000001, 
    0x00000064, 0x00000000, 0x00000089, 0x00010003, 0x00000001, 0x00000064, 
    0x00000000, 0x65736142, 0x706d6153, 0x0072656c, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x6867694c, 0x70616d74, 0x68706c41, 0x6d615361, 
    0x72656c70, 0x67694c00, 0x616d7468, 0x6d615370, 0x72656c70, 0x5f737000, 
    0x00305f32, 0x7263694d, 0x666f736f, 0x52282074, 0x33442029, 0x20395844, 
    0x64616853, 0x43207265, 0x69706d6f, 0x0072656c, 0x05000051, 0xa00f0000, 
    0x3f800000, 0x00000000, 0x00000000, 0x00000000, 0x0200001f, 0x80000000, 
    0xb0030000, 0x0200001f, 0x80000000, 0xb0030001, 0x0200001f, 0x90000000, 
    0xa00f0800, 0x0200001f, 0x90000000, 0xa00f0801, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x03000042, 0x800f0002, 0xb0e40000, 0xa0e40800, 0x03000042, 
    0x800f0001, 0xb0e40001, 0xa0e40801, 0x03000042, 0x800f0000, 0xb0e40001, 
    0xa0e40802, 0x03000005, 0x80070000, 0x80e40002, 0x80e40001, 0x03000002, 
    0x80070000, 0x80e40000, 0x80e40000, 0x03000002, 0x80080000, 0x81ff0000, 
    0xa0000000, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff
};
//
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
//   fxc /DPASS=1 /Dmain=main /Emain /Tps_2_0 /nologo /Fhtmpshader.h
//    WorldVertexAlpha_ps20.fxc
//
//
// Parameters:
//
//   sampler2D BaseSampler;
//   sampler2D LightmapAlphaSampler;
//   sampler2D LightmapSampler;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   BaseSampler          s0       1
//   LightmapSampler      s1       1
//   LightmapAlphaSampler s2       1
//


static unsigned int pixelShader_WorldVertexAlpha_ps20_1[] =
{
    0xffff0200, 0x0032fffe, 0x42415443, 0x0000001c, 0x000000a0, 0xffff0200, 
    0x00000003, 0x0000001c, 0x00000000, 0x00000099, 0x00000058, 0x00000003, 
    0x00000001, 0x00000064, 0x00000000, 0x00000074, 0x00020003, 0x00000001, 
    0x00000064, 0x00000000, 0x00000089, 0x00010003, 0x00000001, 0x00000064, 
    0x00000000, 0x65736142, 0x706d6153, 0x0072656c, 0x000c0004, 0x00010001, 
    0x00000001, 0x00000000, 0x6867694c, 0x70616d74, 0x68706c41, 0x6d615361, 
    0x72656c70, 0x67694c00, 0x616d7468, 0x6d615370, 0x72656c70, 0x5f737000, 
    0x00305f32, 0x7263694d, 0x666f736f, 0x52282074, 0x33442029, 0x20395844, 
    0x64616853, 0x43207265, 0x69706d6f, 0x0072656c, 0x05000051, 0xa00f0000, 
    0x3eaaaa3b, 0x3f800000, 0x00000000, 0x00000000, 0x05000051, 0xa00f0001, 
    0x00000000, 0x3f800000, 0x00000000, 0x00000000, 0x0200001f, 0x80000000, 
    0xb0030000, 0x0200001f, 0x80000000, 0xb0030001, 0x0200001f, 0x90000000, 
    0xa00f0800, 0x0200001f, 0x90000000, 0xa00f0801, 0x0200001f, 0x90000000, 
    0xa00f0802, 0x03000042, 0x800f0002, 0xb0e40000, 0xa0e40800, 0x03000042, 
    0x800f0001, 0xb0e40001, 0xa0e40801, 0x03000042, 0x800f0000, 0xb0e40001, 
    0xa0e40802, 0x03000008, 0x80010000, 0x80e40002, 0xa0000000, 0x03000005, 
    0x80080001, 0x80ff0001, 0x80000000, 0x03000002, 0x80080001, 0x80ff0001, 
    0x80ff0001, 0x03000002, 0x80080000, 0x81ff0000, 0xa0550000, 0x02000001, 
    0x80060000, 0xa0d20001, 0x03000005, 0x80080000, 0x80ff0001, 0x80ff0000, 
    0x02000001, 0x80010000, 0x80550000, 0x02000001, 0x800f0800, 0x80e40000, 
    0x0000ffff
};
static PrecompiledShaderByteCode_t WorldVertexAlpha_ps20_pixel_shaders[2] = 
{
	{ pixelShader_WorldVertexAlpha_ps20_0, sizeof( pixelShader_WorldVertexAlpha_ps20_0 ) },
	{ pixelShader_WorldVertexAlpha_ps20_1, sizeof( pixelShader_WorldVertexAlpha_ps20_1 ) },
};
struct WorldVertexAlpha_ps20PixelShader_t : public PrecompiledShader_t
{
	WorldVertexAlpha_ps20PixelShader_t()
	{
		m_nFlags = SHADER_CUSTOM_ENUMERATION;
		m_nCentroidMask = 0x2;
		m_pByteCode = WorldVertexAlpha_ps20_pixel_shaders;
		m_nShaderCount = 2;
		m_pName = "WorldVertexAlpha_ps20";
		m_nDynamicCombos = 1;
		GetShaderDLL()->InsertPrecompiledShader( PRECOMPILED_PIXEL_SHADER, this );
	}
};
static WorldVertexAlpha_ps20PixelShader_t WorldVertexAlpha_ps20_PixelShaderInstance;
#endif // DEFINE_SHADERS
